// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RacketSpeed.Infrastructure.Data;

#nullable disable

namespace RacketSpeed.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230712105654_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "595c4c21-7043-48ad-ae83-b2be56e0e157",
                            ConcurrencyStamp = "c38775b2-ac11-4d47-a095-4c2bc311942f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "f7f9c64e-78ef-4cec-9d58-25bb9d3c9171",
                            ConcurrencyStamp = "3b2c6060-d984-4364-a870-447465f212a4",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a27b0f94-b45b-4c9b-8043-25ef63ddd217",
                            RoleId = "595c4c21-7043-48ad-ae83-b2be56e0e157"
                        },
                        new
                        {
                            UserId = "78ce134c-d04f-4aa9-aa2e-59a2c63e80a8",
                            RoleId = "f7f9c64e-78ef-4cec-9d58-25bb9d3c9171"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a27b0f94-b45b-4c9b-8043-25ef63ddd217",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec517875-64a1-4dc2-8285-b3ddfbeee71d",
                            Deposit = 0m,
                            Email = "ivan@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Иван",
                            LastName = "Димитров",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@ABV.BG",
                            NormalizedUserName = "ADMINISTRATOR123",
                            PasswordHash = "AQAAAAIAAYagAAAAEG1BQ+iaoagxAuRJ0tFYYZAJbiYbYctCaT4xlj2KPBMlk/OcD5wccWTrCirsZorTlg==",
                            PhoneNumber = "+359883008292",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6655a9a-39bb-447b-8afb-1554904b314a",
                            TwoFactorEnabled = false,
                            UserName = "administrator123"
                        },
                        new
                        {
                            Id = "2a5434f2-4e92-44ee-8b8b-115b943e0ccf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4794fe93-7da0-41ab-84b9-c89b13343302",
                            Deposit = 30m,
                            Email = "daniel@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Даниел",
                            LastName = "Николов",
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@ABV.BG",
                            NormalizedUserName = "REGULARUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAROp8xlJvQtYquO/zl5NfDd/MtXYQcUh5TftVsPntfLUc+8+TIAfz8MW0uUEwJN6Q==",
                            PhoneNumber = "+359881008822",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "829d648a-e37c-42e4-b8a0-911129f3d7db",
                            TwoFactorEnabled = false,
                            UserName = "regularUser"
                        },
                        new
                        {
                            Id = "78ce134c-d04f-4aa9-aa2e-59a2c63e80a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c78e14ae-5024-4d9d-afad-86abc930836c",
                            Deposit = 0m,
                            Email = "kristina@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Кристина",
                            LastName = "Желева",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTINA@ABV.BG",
                            NormalizedUserName = "EMPLOYEE123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEKFQJqQasXqL7WPFvevxhxBQtvq/MXN0P9NHcDVa3fSbIBqfIzIBAjrQeIorlxU5w==",
                            PhoneNumber = "+359893009911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "482db283-e9ea-47ea-8f7b-9fd5351db768",
                            TwoFactorEnabled = false,
                            UserName = "employee123"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b84c3c54-992e-4397-8f4c-57021baf576b"),
                            Biography = "Председател и основател на Бадминтон клуб „Ракет Спийд“ е Гергин Ангелов.\n\nТой е млад и енергичен спортист, с вече 15 годишен опит, като национален състезател по бадминтон на България. Двукратен републикански шампион през 2007 и 2010 год. на единично и многократен републикански шампион на двойки, както и шампион на множество държавни отборни първенства през годините. Успява да достигне до 8-мо място на европейско първенство за юноши във Финландия и до топ 200 в световната ранглиста на мъже единично. Гергин е дългогодишен състезател във вътрешните лиги на Германия, Италия, Дания (страната на бадминтона) и Норвегия. Успява да достигне финал в Италианската първа лига със своя отбор от северна Италия.  Той също така е с множество международни отличия, като състезател и представител на българския национален отбор в цяла Европа, с голям опит като треньор в Норвегия, Дания и България.",
                            FirstName = "Гергин",
                            IsDeleted = false,
                            LastName = "Недялков"
                        },
                        new
                        {
                            Id = new Guid("3baff796-9516-4f73-b58b-9405a7739de1"),
                            Biography = "Даниел Николов, 25-годишен треньор по бадминтон, е изгряваща звезда в света на бадминтона. Със страст към спорта и богатство от знания, Даниел бързо си направи име в бадминтон общността. Той притежава изключителни треньорски способности и дълбоко разбиране на играта, което му позволява да извади най-доброто от своите ученици.\n\nТреньорският стил на Даниел се характеризира със способността му да вдъхновява и мотивира играчите да разгърнат пълния си потенциал. Той съчетава техническа експертиза с ефективни комуникационни умения, за да създаде положителна и благоприятна среда за учене. Независимо дали тренира начинаещи или напреднали играчи, Даниел адаптира подхода си към нуждите и нивата на умения на всеки индивид.",
                            FirstName = "Даниел",
                            IsDeleted = false,
                            LastName = "Николов"
                        },
                        new
                        {
                            Id = new Guid("d05543f5-2bd3-42cb-b305-c7c09aeb6fdd"),
                            Biography = "Димитър Янакиев, 24-годишен треньор по бадминтон, прави вълни в света на бадминтона с изключителните си треньорски умения и страст към спорта. С младежка енергия и дълбоко разбиране на играта, Димитър бързо се утвърди като търсен треньор в бадминтон общността.\n\nДимитър притежава естествената способност да се свързва с учениците си и да ги вдъхновява да постигат най-доброто от себе си. Неговият треньорски стил се характеризира с перфектна комбинация от технически опит и мотивационни стратегии. Той има остро око за детайлите, което му позволява да идентифицира областите за подобрение и да предоставя персонализирани насоки на своите играчи.",
                            FirstName = "Димитър",
                            IsDeleted = false,
                            LastName = "Янакиев"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.CoachImageUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId")
                        .IsUnique();

                    b.ToTable("CoachImageUrls");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c951bfef-06ff-49b5-b439-366d2012d840"),
                            CoachId = new Guid("b84c3c54-992e-4397-8f4c-57021baf576b"),
                            Url = "https://i.ibb.co/hXsLpmC/Gergin-Nedyalkov-pure-black.jpg"
                        },
                        new
                        {
                            Id = new Guid("9bd08474-5a89-4fb3-a521-26851fe958cc"),
                            CoachId = new Guid("3baff796-9516-4f73-b58b-9405a7739de1"),
                            Url = "https://i.ibb.co/hW0XY4C/daniel-coach-pureblack.jpg"
                        },
                        new
                        {
                            Id = new Guid("df33dd6e-5aee-45ea-9c33-b030756d8d70"),
                            CoachId = new Guid("d05543f5-2bd3-42cb-b305-c7c09aeb6fdd"),
                            Url = "https://i.ibb.co/dJBZSpx/dimitar-coach-pureblack.jpg"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac0aea93-5277-4992-9f4b-5c1a8cbb8395"),
                            IsDeleted = false,
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("81cfcbbd-6411-4e43-974f-625c2db5b9ac"),
                            IsDeleted = false,
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("d4a6a62b-6695-486a-b81e-c60da83ba6f2"),
                            IsDeleted = false,
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("6e00f7d0-9549-4404-9385-1213d5764c91"),
                            IsDeleted = false,
                            Number = 4
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f92294f-bafb-479e-8d37-cdeb04ce4e65"),
                            Category = "Турнири за Деца",
                            Content = "Бадминтон клуб Ракет Спийд с 23-ма състезатели на зоналното първенство под 11 години – състезание от ДСК на БФБ ЗОНА СОФИЯ\n\n🟥⬛ Бадминтон клуб Ракет Спийд регистрира участие с най-много състезатели на зоналното първенство под 11 години на 12.02 в Бадминтон зала Европа, град София!\n\n🥈Второ място за Иван Дончев в дисциплината момчета единично под 11 години!\n\n🥉Трето място за Стефан Койчинов, който загуби от съботборника си Иван Дончев на полуфинала след равностойна среща в три гейма!\n\n🏸 5/8 място за Стилиян Николов и страхотно представяне като за първо състезание!\n\n✅ Всички останали деца от клуба загубиха в груповата фаза на турнира и разписаха победи, като направиха страхотно представяне за краткото време от което тренират! За някои от тях това беше и първо официално състезание‼️\n🟥⬛ На Зоналното първенство по 11 години ЗОНА СОФИЯ взеха участие клубове от София, Дупница, Оряхово и Самоков.\n\nБадминтон клуб Ракет Спийд поздравява всичките си 2️⃣3️⃣ състезатели под 11 години, които взеха участие и се представиха достойно като за първо състезание от ДСК на БФБ за годината в тази възрастова група! Подготовката за държавното първенство под 11 години през Май месец продължава с пълни сили от всички! 🟥⬛🏆🇧🇬🏆",
                            End = new DateTime(2023, 2, 14, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Location = "град София, Бадминтон зала Европа",
                            Start = new DateTime(2023, 2, 12, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Зонално първенство под 11 години ЗОНА СОФИЯ"
                        },
                        new
                        {
                            Id = new Guid("73fc9355-8eaa-4c87-a49b-7526f25fd5d2"),
                            Category = "Турнири за Деца",
                            Content = "Бадминтон клуб Ракет Спийд с 23-ма състезатели на зоналното първенство под 11 години – състезание от ДСК на БФБ ЗОНА СОФИЯ\n\n🟥⬛ Бадминтон клуб Ракет Спийд регистрира участие с най-много състезатели на зоналното първенство под 11 години на 12.02 в Бадминтон зала Европа, град София!\n\n🥈Второ място за Иван Дончев в дисциплината момчета единично под 11 години!\n\n🥉Трето място за Стефан Койчинов, който загуби от съботборника си Иван Дончев на полуфинала след равностойна среща в три гейма!\n\n🏸 5/8 място за Стилиян Николов и страхотно представяне като за първо състезание!\n\n✅ Всички останали деца от клуба загубиха в груповата фаза на турнира и разписаха победи, като направиха страхотно представяне за краткото време от което тренират! За някои от тях това беше и първо официално състезание‼️\n🟥⬛ На Зоналното първенство по 11 години ЗОНА СОФИЯ взеха участие клубове от София, Дупница, Оряхово и Самоков.\n\nБадминтон клуб Ракет Спийд поздравява всичките си 2️⃣3️⃣ състезатели под 11 години, които взеха участие и се представиха достойно като за първо състезание от ДСК на БФБ за годината в тази възрастова група! Подготовката за държавното първенство под 11 години през Май месец продължава с пълни сили от всички! 🟥⬛🏆🇧🇬🏆",
                            End = new DateTime(2022, 11, 13, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Location = "с. Горна Малина, комплекс Горна Малина",
                            Start = new DateTime(2022, 11, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "НАЦИОНАЛЕН КОЛЕДЕН ТУРНИР НА БАДМИНТОН КЛУБ РАКЕТ СПИЙД под патронажа на кмета на община Горна Малина – инж. Ангел Жиланов!"
                        },
                        new
                        {
                            Id = new Guid("1786e4bd-4fbf-4ab9-9e8c-007361ff21f5"),
                            Category = "Турнири за Деца",
                            Content = "ВТОРИ ВЪТРЕШЕН ТУРНИР НА БАДМИНТОН КЛУБ РАКЕТ СПИЙД 🏆\n➡️ На 26.02 се проведе вторият Вътрешен турнир на Бадминтон клуб Ракет Спийд за всички състезали от всички възрастови групи на детско-юношеската школа на клуба!\n\n✅ На турнира участваха повече от 2️⃣5️⃣ деца от всички групи и локации на Бадминтон клуб Ракет Спийд в София, Елин Пелин и Горна Малина! Това беше поредния успешен Вътрешни турнири на клуба със силна социална значимост и състезателна атмосфера! 🏆\n🟥⬛Състезателите на клуба взеха участие в дисциплините 🏸 момичета под 9 год. 🏸 момчета под 11 год. 🏸 момичета и момчета под 13 год. 🏸 юноши и любители 🏸 девойки и любители 🏸\n🟥⬛ Вътрешните турнири дават възможност на всички състезатели от клуба да се изяват в състезателна клубна среда с което да подобрят нивото си на игра, комуникативните си умения и социалната си среда! Това е магията на спорта и на Бадминтон клуб Ракет Спийд!",
                            End = new DateTime(2023, 2, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Location = "град София, кв. Гео Милев, зала Младост",
                            Start = new DateTime(2023, 2, 26, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Втори вътрешен турнир на Бадминтон клуб Ракет Спийд за всички състезатели от всички възрастови групи на детско-юношеската школа на клуба!"
                        },
                        new
                        {
                            Id = new Guid("b05b55ca-f19f-4479-a16c-791244b8f453"),
                            Category = "Турнири за Любители",
                            Content = "На 13.11 се проведе Осми турнир на БК Ракет Спийд , който е част от веригата турнири на клуба за любители и на който участваха 3️⃣0️⃣ любители, ветерани и деца от Бадминтон клуб Ракет Спийд и други клубове!\n\n🟥⬛ На турнира се изиграха 70 мача за целия ден в дисциплините 🏸 Мъже единично 🏸Жени единично 🏸Смесени двойки!\n\n🟥⬛ Крайното класиране и резултатите от всички мачове са публикувани на този линк https://www.tournamentsoftware.com/sport/events.aspx?id=FBCD7342-F0FF-4DF3-AFFA-2417CE2AD3DC\n\n🟥⬛ Бадминтон клуб Ракет Спийд благодари на всички участници за страхотната игра, емоциите и участието на поредния успешен турнир от веригата турнири на клуба! Не забравяйте да тренирате и да посещавате редовно сошъл тренировките за любители на Ракет Спийд за да се подготвите и за следващия турнир, който предстои и ще бъде коледен! 🎅🎄🎁",
                            End = new DateTime(2022, 11, 14, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Location = "град София, Бадминтон зала Европа",
                            Start = new DateTime(2022, 11, 13, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Осми турнир за любители!"
                        },
                        new
                        {
                            Id = new Guid("8f5f3e62-527a-4b20-b54c-2faa3b539b79"),
                            Category = "Развлечения",
                            Content = "Пригответе се за едно необикновено събитие в парка в Южния парк! Бадминтон Баш обещава ден, изпълнен с вълнение, приятелство и незабравими спомени както за любителите на бадминтона, така и за посетителите на парка.\n\n🏸🌳 Членовете на местния клуб по бадминтон се подготвят с нетърпение за един вълнуващ ден на приятелски състезания и забавления на открито. Откритото пространство на парка ще бъде превърнато в приказка за бадминтон, с множество кортове, създадени за играчи от всички нива на умения.\n\n🎶🎵 Докато участвате във вълнуващи мачове по бадминтон, въздухът ще бъде изпълнен с живи звуци на музика, изпълнявана от талантливи членове на клуба. Изпълненията на живо ще добавят ритмичен фон към действието, създавайки оживена атмосфера, която зарежда с енергия както играчи, така и зрители.\n\n🍔🍹 За да подхраните ентусиазма си, ще има разнообразни сергии за храна и продавачи, предлагащи апетитни лакомства и освежаващи напитки. Отдайте се на вкусни бургери, изискани закуски и възхитителни напитки, зареждайки енергийните си нива, докато се наслаждавате на празненствата.\n\n⚡🎉 Отвъд игрищата за бадминтон паркът ще кипи от забавления за всички. Участвайте в приятелски игри и дейности, като мини-турнири, щафетни състезания и предизвикателства за умения, предназначени да извадят най-доброто от вашите спортни способности, като същевременно насърчават чувството за общност и другарство.",
                            End = new DateTime(2023, 9, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Location = "град София, Южен Парк",
                            Start = new DateTime(2023, 9, 10, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Бадминтон в парка: Ден на спорт, музика и кулинарни изкушения!"
                        },
                        new
                        {
                            Id = new Guid("94fa68d4-eab0-4ecd-9bd1-2d507d6a1daf"),
                            Category = "Лагери",
                            Content = "От 11.07 до 15.07 се проведе ЛЕТНИЯ ЛАГЕР НА БАДМИНТОН КЛУБ РАКЕТ СПИЙД В ОРЯХОВО! 🟥⬛🏸🏆\n✅ На лагера участваха общо 1️⃣2️⃣ деца от групите на клуба в 📍София 📍Елин Пелин 📍Челопечене! Също така участие взеха и 3️⃣ възрастни състезатели от любителския отбор на клуба!\n\n➡️ Децата и любителите тренираха двуразово и съвместно с домакините от БК Оряхово! Нови запознанства, социализиране, емоции и приятелства на всички деца от двата клуба!\n\n🥇🥈🥉 БК Ракет Спийд проведе и турнир по време на лагера, където участваха всички деца от двата клуба и се състезаваха по между като по този начин демонстрираха наученото от лагера и натрупаха още повече опит в игра!\n\n✅ Благодарности на община Оряхово за оказаното съдействие с вътрешния транспорт по време на целия лагер! Благодарности и на БК Оряхово за страхотните домакинство и съдействие!",
                            End = new DateTime(2023, 7, 4, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Location = "с. Равно Поле, област София",
                            Start = new DateTime(2023, 6, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "ЛЕТЕН ЛАГЕР НА БАДМИНТОН КЛУБ РАКЕТ СПИЙД В ОРЯХОВО!"
                        },
                        new
                        {
                            Id = new Guid("69c86f7c-aaf5-4e7b-9c50-4a01d28eb8ed"),
                            Category = "Лагери",
                            Content = "От 05.06 до 10.06, BEACH BADMINTON CAMP в Созопол, България, събра любители на бадминтона за едно незабравимо преживяване край морето! 🌊🏸🏖️\n\n🌞 Организиран от бадминтон клуб „Shuttle Masters“, лагерът предостави уникална възможност на играчи от всички възрасти и нива на умения да подобрят бадминтон уменията си, докато се наслаждават на красивата крайбрежна обстановка.\n\n✅ Участници от различни градове като София, Бургас, Варна и други се присъединиха към лагера, създавайки разнообразна и жизнена бадминтон общност на плажа.\n\n➡️ Всеки ден участниците участваха в интензивни тренировки, водени от опитни треньори. Те се фокусираха върху подобряването на работата с крака, точността на удара, стратегията и цялостното представяне на играта, докато усещаха пясъка между пръстите на краката си и вдишваха чистия морски въздух.\n\n🏆 За да добави елемент на приятелско състезание, лагерът организира плажен турнир по бадминтон. Играчите демонстрираха своите умения, ентусиазъм и работа в екип, осигурявайки вълнуващо зрелище за всички участници.\n\n🌊 По време на почивките от тренировки и мачове, участниците имаха шанса да разгледат очарователния град Созопол, известен със своя живописен стар град, пясъчни плажове и оживена лятна атмосфера. Те се наслаждаваха на плажни игри, слънчеви бани и изграждане на трайни приятелства с колеги ентусиасти по бадминтон.\n\n✅ Организаторите на лагера изказват своята благодарност на община Созопол за подкрепата и съдействието, осигуряващо безпроблемното функциониране на лагера. Красивият плаж, топлото гостоприемство и запомнящите се преживявания превърнаха Плажния бадминтон лагер в Созопол в едно невероятно събитие за всички участници.\n\n🏸 Независимо дали ставаше въпрос за подобряване на уменията, наслаждаване на атмосферата на плажа или създаване на нови приятелства, Плажният бадминтон лагер в Созопол остави трайно въздействие върху всички присъстващи, насърчавайки любовта към спорта и създавайки скъпи спомени край морето.",
                            End = new DateTime(2023, 6, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Location = "с. Равно Поле, област София",
                            Start = new DateTime(2023, 6, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Незабравим лагер по бадминтон на плажа в Созопол, България: Сливане на слънце, пясък и удари!"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.EventImageUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventImageUrls");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8767842-bbd0-403a-9d34-52aa3f5ff25e"),
                            EventId = new Guid("1f92294f-bafb-479e-8d37-cdeb04ce4e65"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/IMG_9305.jpg"
                        },
                        new
                        {
                            Id = new Guid("a655de6e-de8a-4623-b831-a014a481fbdb"),
                            EventId = new Guid("1f92294f-bafb-479e-8d37-cdeb04ce4e65"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/03/330208980_1218640362399044_3628746024792629893_n.jpg"
                        },
                        new
                        {
                            Id = new Guid("55371777-bdd3-4897-a45f-e2b351e8e131"),
                            EventId = new Guid("1f92294f-bafb-479e-8d37-cdeb04ce4e65"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/336301819_114264168299984_5652756639479386963_n-768x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("90c8159e-6b63-44ac-b8fa-0ca90d46dbe1"),
                            EventId = new Guid("73fc9355-8eaa-4c87-a49b-7526f25fd5d2"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/12/azikmetgovoriq4.jpg"
                        },
                        new
                        {
                            Id = new Guid("16345531-2c0b-45f0-ba30-99aa3ddc2625"),
                            EventId = new Guid("73fc9355-8eaa-4c87-a49b-7526f25fd5d2"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/12/IMG-9e5133160302ac8bfec37b9c732a0223-V-768x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("a8a8d927-ccd9-4d7f-8f5d-4fe3e700a8c0"),
                            EventId = new Guid("73fc9355-8eaa-4c87-a49b-7526f25fd5d2"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/12/IMG-dbfefd70082d9e60a3fd198a8d42ad14-V-768x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("a96c5527-c051-4fc9-833d-3f0ec1b6a872"),
                            EventId = new Guid("1786e4bd-4fbf-4ab9-9e8c-007361ff21f5"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/03/329820200_1263197310932177_1092414160811115513_n-1-1536x1038.jpg"
                        },
                        new
                        {
                            Id = new Guid("49a1a708-8d63-477c-b271-3d83e47fb18c"),
                            EventId = new Guid("1786e4bd-4fbf-4ab9-9e8c-007361ff21f5"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/03/329971659_6161035227253222_4788344597138645538_n-300x207.jpg"
                        },
                        new
                        {
                            Id = new Guid("d4de03f6-dfd9-497d-94c6-8c359940a2cd"),
                            EventId = new Guid("1786e4bd-4fbf-4ab9-9e8c-007361ff21f5"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/03/331489280_1267659097497195_6186449950957015576_n-692x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("cc4c832d-5296-42cd-b7e1-7c1190083f88"),
                            EventId = new Guid("b05b55ca-f19f-4479-a16c-791244b8f453"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/11/314363098_674015330817891_5529511714079046930_n.jpg"
                        },
                        new
                        {
                            Id = new Guid("6b0e3ab5-dd8a-4d43-ab87-b825612e5db0"),
                            EventId = new Guid("b05b55ca-f19f-4479-a16c-791244b8f453"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/11/314898989_674015497484541_1052585193908409308_n-300x225.jpg"
                        },
                        new
                        {
                            Id = new Guid("9b126482-baee-4be5-b37c-31043ae53cdd"),
                            EventId = new Guid("b05b55ca-f19f-4479-a16c-791244b8f453"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/11/315549505_674015064151251_5256221105870491252_n-300x225.jpg"
                        },
                        new
                        {
                            Id = new Guid("32280b40-8440-4689-9e1f-2b1f535ad097"),
                            EventId = new Guid("8f5f3e62-527a-4b20-b54c-2faa3b539b79"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/10/IMGP8597-1536x1028.jpg"
                        },
                        new
                        {
                            Id = new Guid("80de9de9-ffff-4437-9a71-7dc63aaf36f3"),
                            EventId = new Guid("8f5f3e62-527a-4b20-b54c-2faa3b539b79"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/10/IMGP8265-1-681x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("1d37b8bc-181d-4138-9d1d-030e85a283eb"),
                            EventId = new Guid("8f5f3e62-527a-4b20-b54c-2faa3b539b79"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/10/IMGP8505-1536x945.jpg"
                        },
                        new
                        {
                            Id = new Guid("e857e135-e3e7-45c0-aa4c-cb3461bd9b0c"),
                            EventId = new Guid("94fa68d4-eab0-4ecd-9bd1-2d507d6a1daf"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/10/292469405_6014520031896525_1846195557850577004_n.jpg"
                        },
                        new
                        {
                            Id = new Guid("0b8a82c2-f91d-459b-a01c-05e04afccf85"),
                            EventId = new Guid("94fa68d4-eab0-4ecd-9bd1-2d507d6a1daf"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/10/292619566_6018545288160666_355388044900432955_n-768x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("a9dc0533-2d9d-4e83-b675-7dc8e0971848"),
                            EventId = new Guid("94fa68d4-eab0-4ecd-9bd1-2d507d6a1daf"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/10/292708134_6018544411494087_1493905020130446141_n-768x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("4b3720bf-a914-46f2-a06a-3944e63f7579"),
                            EventId = new Guid("69c86f7c-aaf5-4e7b-9c50-4a01d28eb8ed"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/10/292802420_6018556561492872_4861236553951200987_n-300x225.jpg"
                        },
                        new
                        {
                            Id = new Guid("79f11e36-d59f-4db0-963e-e5e22092be90"),
                            EventId = new Guid("69c86f7c-aaf5-4e7b-9c50-4a01d28eb8ed"),
                            Url = "https://albena.bg/image/MTAyMzQuanBnLzE2MDAvMTYwMC8xLzEvNzAvLy8/.jpg"
                        },
                        new
                        {
                            Id = new Guid("c742184a-e5f9-4e6c-b32d-522a22732dbb"),
                            EventId = new Guid("69c86f7c-aaf5-4e7b-9c50-4a01d28eb8ed"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2022/10/292799079_6018558058159389_2417586080868346013_n-300x225.jpg"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NationalRanking")
                        .HasColumnType("int");

                    b.Property<string>("PlayingHand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorldRanking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75328ffa-d42e-4fe1-a6f9-aa7518d185be"),
                            Biography = "Даниел Николов, опитен бадминтонист, нашумя както на родна, така и на международна сцена. С впечатляваща колекция от национални титли, многобройни триумфи в международни турнири и участие в престижни събития като Европейските игри, Европейските първенства и Световните първенства, мъжеството на Даниел е неоспоримо. Светкавичните рефлекси и пъргавата работа на Даниел му позволяват да покрива корта без усилие, докато прецизното му изпълнение на удара държи опонентите на крака.",
                            BirthDate = new DateTime(1998, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "гр. Хасково",
                            CreatedOn = new DateTime(2023, 6, 21, 12, 15, 32, 825, DateTimeKind.Unspecified),
                            FirstName = "Даниел",
                            Height = 170,
                            IsDeleted = false,
                            LastName = "Николов",
                            NationalRanking = 1,
                            PlayingHand = "Дясна",
                            WorldRanking = 93
                        },
                        new
                        {
                            Id = new Guid("652a9f2b-341e-4c2a-8509-a95a9151d6c8"),
                            Biography = "Димитър Янакиев, забележителен състезател по бадминтон, се е превърнал в изявена фигура както на национална, така и на международна сцена. С впечатляващ репертоар от национални титли, множество победи в международни турнири и активно участие в престижни събития като Европейски игри, Европейски първенства и Световни първенства, Димитър затвърди статута си на играч от най-високо ниво. Неговите изключителни умения, фино настроени чрез години всеотдайно обучение, го тласнаха да доминира на корта за бадминтон. ",
                            BirthDate = new DateTime(1998, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "гр. София",
                            CreatedOn = new DateTime(2023, 6, 13, 12, 15, 32, 825, DateTimeKind.Unspecified),
                            FirstName = "Димитър",
                            Height = 176,
                            IsDeleted = false,
                            LastName = "Янакиев",
                            NationalRanking = 2,
                            PlayingHand = "Лява",
                            WorldRanking = 147
                        },
                        new
                        {
                            Id = new Guid("24a38056-dcf3-4f5a-979e-75e6eee44b89"),
                            Biography = "Кристина Желева, страхотна състезателка по бадминтон, се е утвърдила като видна фигура както в национални, така и в международни кръгове. С впечатляваща колекция от национални титли, многобройни триумфи в международни турнири и активно участие в уважавани събития като Европейските игри, Европейските първенства и Световните първенства, Кристина затвърди позицията си на спортист от най-висок клас.\nЗабележителните умения на Кристина, усъвършенствани с години на безмилостно обучение, са я тласнали да се отличава на корта за бадминтон.",
                            BirthDate = new DateTime(1998, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "гр. Хасково",
                            CreatedOn = new DateTime(2023, 6, 13, 12, 15, 32, 825, DateTimeKind.Unspecified),
                            FirstName = "Кристина",
                            Height = 161,
                            IsDeleted = false,
                            LastName = "Желева",
                            NationalRanking = 4,
                            PlayingHand = "Дясна",
                            WorldRanking = 240
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.PlayerImageUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerImageUrls");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ce120a6-a20b-4b70-a45b-68dac3d842b9"),
                            PlayerId = new Guid("75328ffa-d42e-4fe1-a6f9-aa7518d185be"),
                            Url = "https://i.ibb.co/kX77v9b/daniel-nikolov-player4-removebg-preview.jpg"
                        },
                        new
                        {
                            Id = new Guid("76228ac9-eedb-4417-be15-269056b60ff2"),
                            PlayerId = new Guid("652a9f2b-341e-4c2a-8509-a95a9151d6c8"),
                            Url = "https://i.ibb.co/M1SsZvC/dimitar-yanakiev-player1-removebg-preview.jpg"
                        },
                        new
                        {
                            Id = new Guid("b1080ceb-b345-41f1-9301-64e78ef34c6a"),
                            PlayerId = new Guid("24a38056-dcf3-4f5a-979e-75e6eee44b89"),
                            Url = "https://i.ibb.co/qRBj2C8/kristina-zheleva-player2-removebg-preview.jpg"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4d18dc1-684a-44e8-bee5-31d415bac7b4"),
                            Content = "ВТОРО МЯСТО🥈за мъжкия отбор на Бадминтон клуб Ракет Спийд на Държавно отборно първенство за мъже и жени “А” група 2023 год.!\n\n🟥⬛ След изключително завързани мачове във финалния ден на първенството, нашият мъжки отбор успя да се пребори за второто място и беше на крачка от титлата на България!\n\n🟥⬛ Мъжкият отбор на БК Ракет Спийд в състав: Милан Дратва, Димитър Янакиев, Евгени Панев, Антон Далов и ръководител: Гергин Ангелов постигна исторически успех за клуба след като успя да завоюва титла за второ място в България с първото си участие в Държавно отборно първенство “А” група!🥈🏆🇧🇬\n🟥⬛ След общо изиграни 5 отборни мача на първенството и изключително тежки мачове, нашият отбор успя да постигне големият си успех благодарение на четирите победи които завоюва в груповите фази и във финалната четворка със следните отбори и резултати:\n\n29.04.2023 г. Група 2\n\nБК Ракет Спийд – БК Кърджали 4️⃣ : 1️⃣\nБК Ракет Спийд – БК Виас 3️⃣ : 2️⃣\n30.04.2023 г. ФИНАЛНА ЧЕТВОРКА\n\nБК Ракет Спийд – Виктори БК 2️⃣ : 3️⃣\nБК Ракет Спийд – БК Левски-Люлин 3️⃣ : 2️⃣\nБК Ракет Спийд – БК Стара Загора 4️⃣ : 1️⃣\n\n🏆🥈 Благодарности на всички състезатели от състава на мъжкия отбор на БК Ракет Спийд, които се бориха със сърце и душа и дадоха най-доброто си за отбора! Благодарности и на всички фенове на клуба, които подкрепяха мъжкия ни отбор през цялото първенство! Няма съмнение, че второто място ще ни мотивира още повече и догодина ще гоним титлата с още по-голяма сила и  амбиция!💪🟥⬛🏆🇧🇬",
                            IsDeleted = false,
                            Title = "ВТОРО МЯСТО за мъжкия отбор на Бадминтон клуб Ракет Спийд на Държавно отборно първенство за мъже и жени “А” група 2023 год.!"
                        },
                        new
                        {
                            Id = new Guid("56dcf2d2-1ecc-4f9a-a9d6-82409894898a"),
                            Content = "Днес се сбъдна една голяма мечта‼️ Бадминтон клуб Ракет Спийд със собствена зала за бадминтон в община Елин Пелин с. Равно поле! 🏆🏆🏆\n🟥⬛ Председателят и основател на Бадминтон клуб Ракет Спийд – Гергин Ангелов заедно с кмета на Община Елин Пелин г-н Ивайло Симеонов, зам.кмета г-жа Николова и кмета на с. Равно Поле г-н Григор Господинов откриха новата зала на клуба, която се намира в с. Равно Поле само на 20 км. от София и на 7 км от град Елин Пелин!\n\n🟥⬛ Топ състезателят на Бадминтон клуб Ракет Спийд, който е трикратен шампион на България за 2023 год. и топ 100 в световната ранглиста и първа ракета на България в националния отбор на мъже единично – Даниел Николов заедно с дългогодишния състезател Марин Маринов демонстрираха разигравания в бадминтона на високо ниво пред ръководството на Община Елин Пелин и показаха защо това е най-бързия спорт в света!\n\n🟥⬛ Бадминтон клуб Ракет Спийд има регистриран клон на клуба в Община Елин Пелин от 2022 год. и само за една година дейност повече от 40 деца са част от групата на клуба в Елин Пелин и имат редовен тренировъчен процес, медали от клубни и национални турнири и участие във всички държавни първенства през 2023 год. от държавния спортен календар във всички възрастови групи!\n\n🟥⬛ Благодарности на Община Елин Пелин и на г-н Ивайло Симеонов за огромната подкрепа и съдействие благодарение на които тази дългоочаквана мечта за нашия клуб се превърна в реалност!\n\n🟥⬛ Групата на клуба в Община Елин Пелин и залата в с. Равно поле са вече основен център на клуба, където ще се насочат всички усилия за привличане на нови бъдещи шампиони от с. Равно Поле община Елин Пелин, които един ден да бъдат на световно ниво като нашия голям шампион Даниел Николов!\n\n🟥⬛ Вярваме, че в близко бъдеще бадминтона ще се превърне в традиция за с. Равно поле, а новата собствена залата на клуба ще бъде дом на най-големите шампиони в страната!",
                            IsDeleted = false,
                            Title = "Бадминтон клуб Ракет Спийд със собствена зала за бадминтон в с. Равно поле, Община Елин Пелин! Посетете ни!"
                        },
                        new
                        {
                            Id = new Guid("f4960915-c8e2-42cd-9908-0a8b84f0e350"),
                            Content = "🟥⬛ Държавния личен шампионат за младежи и девойки под 19 години се проведе на 17-19 Март в град Стара Загора!\n\nОт Бадминтон клуб Ракет Спийд взеха участие Антон Далов и Мария-Магдалена Василева. Двамата състезатели на клуба участваха във всички дисциплини на шампионата и направиха достойно класиране!\n\n🟥⬛Антон Далов завоюва бронзов медал и трето място 🥉на младежи двойки заедно с партньора си Виктор Радев от БК “Победа” Дупница ‼️\nНа единично Тончо загуби в първи кръг с три оспорвани гейма, а на смесени двойки на 1/8 финал и се класира на 9-16 място с партньорката си Мария-Магдалена Василева!\n\n🟥⬛ Мария-Магдалена Василева загуби на 1/4 финал девойки двойки с партньорката си Дарина Киселова от БК “Победа” Дупница и се класира на 5-8 място на двойки девойки!\n\nНа единично Маги загуби в първи кръг, а на смесени двойки на 1/8 финал и се класира на 9-16 място с партньора си Антон Далов!\n\n✅ Адмирации за нашите състезатели във възрастова група под 19 години ➡️ Антон Далов и Мария-Магдалена Василева за страхотното представяне, въпреки факта че за Маги това беше едва първо държавно първенство, а за Тони второ! Страхотен опит и за двамата ни младежи, а медала на Антон Далов 🥉е добър успех и показател че големите победи те първа предстоят! 💪",
                            IsDeleted = false,
                            Title = "Държавен личен шампионат за младежи и девойки под 19 години. Трето място и бронз за Антон Далов на двойки младежи!\n"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.PostImageUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImageUrls");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43268f12-1798-4689-9909-530c21d12cbe"),
                            PostId = new Guid("d4d18dc1-684a-44e8-bee5-31d415bac7b4"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/342408243_191873547017741_1776652270621883938_n-1-1536x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("1a558d60-85d9-4e4a-9845-832aa1e2e47a"),
                            PostId = new Guid("d4d18dc1-684a-44e8-bee5-31d415bac7b4"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/343078036_881493409587488_5750249251441164584_n.jpg"
                        },
                        new
                        {
                            Id = new Guid("24ebccee-4f8d-47a8-9b38-26e89ca24e55"),
                            PostId = new Guid("d4d18dc1-684a-44e8-bee5-31d415bac7b4"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/342408243_191873547017741_1776652270621883938_n-1-1536x1024.jpg"
                        },
                        new
                        {
                            Id = new Guid("6d46cd09-30c6-4b90-a614-94863481a7b2"),
                            PostId = new Guid("56dcf2d2-1ecc-4f9a-a9d6-82409894898a"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/335890578_1414842995985667_5560141200872118061_n-1536x1025.jpg"
                        },
                        new
                        {
                            Id = new Guid("97137d68-e683-40a8-9318-2a3998a8e46d"),
                            PostId = new Guid("56dcf2d2-1ecc-4f9a-a9d6-82409894898a"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/336247171_625880579376181_6439443237828826408_n-1536x1025.jpg"
                        },
                        new
                        {
                            Id = new Guid("0171bd2d-5ed5-45b9-810b-e9404c8ed077"),
                            PostId = new Guid("56dcf2d2-1ecc-4f9a-a9d6-82409894898a"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/335687391_1429539214118942_1654581301455269152_n-300x200.jpg"
                        },
                        new
                        {
                            Id = new Guid("268f660f-404b-4dd5-a97f-f853541ded01"),
                            PostId = new Guid("f4960915-c8e2-42cd-9908-0a8b84f0e350"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/336376804_219843777244243_8943796902584552546_n.jpg"
                        },
                        new
                        {
                            Id = new Guid("8c2d316f-f238-4d4b-b04b-c744f3108b8c"),
                            PostId = new Guid("f4960915-c8e2-42cd-9908-0a8b84f0e350"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/336374477_250880414041819_1921799532713397293_n.jpg"
                        },
                        new
                        {
                            Id = new Guid("4ed43a68-8bbe-43e5-8c78-2a0c3036ef1f"),
                            PostId = new Guid("f4960915-c8e2-42cd-9908-0a8b84f0e350"),
                            Url = "https://racketspeedbg.com/wp-content/uploads/2023/05/336642792_9033921860014795_8681986135380440658_n.jpg"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Hour")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RacketsBooked")
                        .HasColumnType("int");

                    b.Property<decimal>("ReservationTotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2910ebde-8bf9-430d-afbd-3d6d10a0b17d"),
                            CourtId = new Guid("ac0aea93-5277-4992-9f4b-5c1a8cbb8395"),
                            CreatedOn = new DateTime(2023, 7, 1, 14, 24, 44, 723, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hour = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            Location = "Зала ИЧС",
                            PeopleCount = 2,
                            PhoneNumber = "+359883024522",
                            RacketsBooked = 2,
                            ReservationTotalSum = 14.00m,
                            Status = "В разработка",
                            UserId = "2a5434f2-4e92-44ee-8b8b-115b943e0ccf"
                        },
                        new
                        {
                            Id = new Guid("96d4067b-e876-43e5-84ef-578638799c69"),
                            CourtId = new Guid("81cfcbbd-6411-4e43-974f-625c2db5b9ac"),
                            CreatedOn = new DateTime(2023, 7, 3, 14, 24, 44, 723, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hour = new TimeSpan(0, 10, 0, 0, 0),
                            IsDeleted = false,
                            Location = "Зала ИЧС",
                            PeopleCount = 3,
                            PhoneNumber = "+359883024522",
                            RacketsBooked = 3,
                            ReservationTotalSum = 21.00m,
                            Status = "Одобрена",
                            UserId = "2a5434f2-4e92-44ee-8b8b-115b943e0ccf"
                        },
                        new
                        {
                            Id = new Guid("6f1f8abc-09aa-4894-8040-4ee9d7fa8710"),
                            CourtId = new Guid("d4a6a62b-6695-486a-b81e-c60da83ba6f2"),
                            CreatedOn = new DateTime(2023, 6, 24, 14, 24, 44, 723, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hour = new TimeSpan(0, 20, 0, 0, 0),
                            IsDeleted = false,
                            Location = "Зала ИЧС",
                            PeopleCount = 4,
                            PhoneNumber = "+359883024522",
                            RacketsBooked = 4,
                            ReservationTotalSum = 28.00m,
                            Status = "Отказана",
                            UserId = "2a5434f2-4e92-44ee-8b8b-115b943e0ccf"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Hour")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("268ae707-8680-4b3b-bfc9-e73441cc8153"),
                            Hour = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3a78d78f-86dd-4c9e-b2c0-6f1b4517448d"),
                            Hour = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2b00d3d6-1f5d-448e-9eee-bb0c86d32d22"),
                            Hour = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("be591263-4446-4a19-871e-e17988349524"),
                            Hour = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5549617c-2898-484b-a8a7-ea9f01c83bb2"),
                            Hour = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f44599f4-8bb3-41ec-bb62-6a5ef8a90932"),
                            Hour = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("615c2831-cf21-49fd-99a7-d8f96d81b7ac"),
                            Hour = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8ba15b2d-baf9-4af8-8434-52d1d5041dee"),
                            Hour = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3d6716d8-1428-4263-94f5-00d7ab8bad8c"),
                            Hour = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2e87302f-a343-4ca6-a6ba-bb1603dce232"),
                            Hour = new TimeSpan(0, 19, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9b440315-76f0-49b8-bd40-71648031d306"),
                            Hour = new TimeSpan(0, 20, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("90f2a039-0147-4f52-a249-05a4134a8234"),
                            Hour = new TimeSpan(0, 21, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b0ff2335-b73b-4b4b-ae77-b012307dd626"),
                            Hour = new TimeSpan(0, 22, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.SignKid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrivacyPolicyIsAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SignOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SignedKids");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba0a6e69-35c5-4680-a32d-a05a5dfc2f22"),
                            EmailAddress = "desislavamother@abv.bg",
                            FullName = "Десислава Жикова",
                            IsDeleted = false,
                            Location = "Зала ИЧС",
                            Message = "Моля, при разглеждане на формата да се свържете с мен.",
                            PhoneNumber = "+359893008911",
                            PrivacyPolicyIsAccepted = true,
                            SignOn = new DateTime(2023, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingType = "Деца до 15"
                        },
                        new
                        {
                            Id = new Guid("4e206f2f-51ab-4ed8-a176-3bca70f60ac9"),
                            EmailAddress = "mariamother@abv.bg",
                            FullName = "Мария Йорданова",
                            IsDeleted = false,
                            Location = "Зала ИЧС",
                            Message = "Имам допълнителни въпроси за графика на тренировки.",
                            PhoneNumber = "+359883401321",
                            PrivacyPolicyIsAccepted = true,
                            SignOn = new DateTime(2023, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingType = "Деца до 11"
                        },
                        new
                        {
                            Id = new Guid("972d0f35-aeda-404c-b8bb-284971d77a56"),
                            EmailAddress = "pavelmother@abv.bg",
                            FullName = "Павел Димитров",
                            IsDeleted = false,
                            Location = "Зала ИЧС",
                            Message = "Колко деца присъстват на тренировка и има ли достатъчно треньори да обръщат внимание на детето ми?",
                            PhoneNumber = "+359886009889",
                            PrivacyPolicyIsAccepted = true,
                            SignOn = new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingType = "Деца до 7"
                        });
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Trainings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f776d719-5a09-4680-a390-84a0035dc955"),
                            CoachId = new Guid("b84c3c54-992e-4397-8f4c-57021baf576b"),
                            DayOfWeek = "Понеделник",
                            End = new DateTime(2023, 6, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 7",
                            Start = new DateTime(2023, 6, 27, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("055f21d4-db35-4ef8-97c8-348400c01f3c"),
                            CoachId = new Guid("b84c3c54-992e-4397-8f4c-57021baf576b"),
                            DayOfWeek = "Сряда",
                            End = new DateTime(2023, 6, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 7",
                            Start = new DateTime(2023, 6, 27, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5ba5d72-3a63-42c5-8308-da62836dae4d"),
                            CoachId = new Guid("b84c3c54-992e-4397-8f4c-57021baf576b"),
                            DayOfWeek = "Петък",
                            End = new DateTime(2023, 6, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 7",
                            Start = new DateTime(2023, 6, 27, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3cbd2158-af65-4133-8717-6b29b559d14b"),
                            CoachId = new Guid("b84c3c54-992e-4397-8f4c-57021baf576b"),
                            DayOfWeek = "Вторник",
                            End = new DateTime(2023, 6, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 11",
                            Start = new DateTime(2023, 6, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("442ad3a2-00bf-40bf-9273-b54b3e8df1a0"),
                            CoachId = new Guid("b84c3c54-992e-4397-8f4c-57021baf576b"),
                            DayOfWeek = "Четвъртък",
                            End = new DateTime(2023, 6, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 11",
                            Start = new DateTime(2023, 6, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8f466ad0-593d-4e91-9ff2-a218486ecc84"),
                            CoachId = new Guid("b84c3c54-992e-4397-8f4c-57021baf576b"),
                            DayOfWeek = "Събота",
                            End = new DateTime(2023, 6, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 11",
                            Start = new DateTime(2023, 6, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a3067f8c-853b-4926-b256-697d6d064784"),
                            CoachId = new Guid("3baff796-9516-4f73-b58b-9405a7739de1"),
                            DayOfWeek = "Понеделник",
                            End = new DateTime(2023, 6, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 15",
                            Start = new DateTime(2023, 6, 27, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("46284911-62da-4835-8438-6298610d5166"),
                            CoachId = new Guid("3baff796-9516-4f73-b58b-9405a7739de1"),
                            DayOfWeek = "Сряда",
                            End = new DateTime(2023, 6, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 15",
                            Start = new DateTime(2023, 6, 27, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("54ddf5c5-1d9c-494d-9e7e-828e221cce39"),
                            CoachId = new Guid("3baff796-9516-4f73-b58b-9405a7739de1"),
                            DayOfWeek = "Петък",
                            End = new DateTime(2023, 6, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 15",
                            Start = new DateTime(2023, 6, 27, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("16a0e612-2b16-44dd-b33a-f8898be0efaa"),
                            CoachId = new Guid("3baff796-9516-4f73-b58b-9405a7739de1"),
                            DayOfWeek = "Вторник",
                            End = new DateTime(2023, 6, 27, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 15",
                            Start = new DateTime(2023, 6, 27, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2614eb8a-30a0-4334-bc75-029d33f31996"),
                            CoachId = new Guid("3baff796-9516-4f73-b58b-9405a7739de1"),
                            DayOfWeek = "Четвъртък",
                            End = new DateTime(2023, 6, 27, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 15",
                            Start = new DateTime(2023, 6, 27, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c130d47-cb76-48fe-a768-b016f33e6383"),
                            CoachId = new Guid("3baff796-9516-4f73-b58b-9405a7739de1"),
                            DayOfWeek = "Събота",
                            End = new DateTime(2023, 6, 27, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 15",
                            Start = new DateTime(2023, 6, 27, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0bff0d99-7ef7-4240-8bcc-cfe15a516ffa"),
                            CoachId = new Guid("d05543f5-2bd3-42cb-b305-c7c09aeb6fdd"),
                            DayOfWeek = "Събота",
                            End = new DateTime(2023, 6, 27, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 7",
                            Start = new DateTime(2023, 6, 27, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("59a17632-279c-432d-9865-5d064019e247"),
                            CoachId = new Guid("d05543f5-2bd3-42cb-b305-c7c09aeb6fdd"),
                            DayOfWeek = "Неделя",
                            End = new DateTime(2023, 6, 27, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 7",
                            Start = new DateTime(2023, 6, 27, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8e170858-1a8b-4411-b01f-768f316680a0"),
                            CoachId = new Guid("d05543f5-2bd3-42cb-b305-c7c09aeb6fdd"),
                            DayOfWeek = "Понеделник",
                            End = new DateTime(2023, 6, 27, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 11",
                            Start = new DateTime(2023, 6, 27, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ad86bc28-4acc-4ece-a038-0cd7def49b43"),
                            CoachId = new Guid("d05543f5-2bd3-42cb-b305-c7c09aeb6fdd"),
                            DayOfWeek = "Петък",
                            End = new DateTime(2023, 6, 27, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 11",
                            Start = new DateTime(2023, 6, 27, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("08389f1d-c228-45e0-9a13-2c9bc7be2d69"),
                            CoachId = new Guid("d05543f5-2bd3-42cb-b305-c7c09aeb6fdd"),
                            DayOfWeek = "Вторник",
                            End = new DateTime(2023, 6, 27, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 15",
                            Start = new DateTime(2023, 6, 27, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("72a64e40-3dfa-46fd-ade5-7e2743bb90b4"),
                            CoachId = new Guid("d05543f5-2bd3-42cb-b305-c7c09aeb6fdd"),
                            DayOfWeek = "Четвъртък",
                            End = new DateTime(2023, 6, 27, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Деца до 15",
                            Start = new DateTime(2023, 6, 27, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.CoachImageUrl", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.Coach", "Coach")
                        .WithOne("CoachImageUrl")
                        .HasForeignKey("RacketSpeed.Infrastructure.Data.Entities.CoachImageUrl", "CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.EventImageUrl", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.Event", "Event")
                        .WithMany("EventImageUrls")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.PlayerImageUrl", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.Player", "Player")
                        .WithOne("PlayerImageUrl")
                        .HasForeignKey("RacketSpeed.Infrastructure.Data.Entities.PlayerImageUrl", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.PostImageUrl", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.Post", "Post")
                        .WithMany("PostImageUrls")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Reservation", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.ApplicationUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Training", b =>
                {
                    b.HasOne("RacketSpeed.Infrastructure.Data.Entities.Coach", "Coach")
                        .WithMany("Trainings")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Coach", b =>
                {
                    b.Navigation("CoachImageUrl")
                        .IsRequired();

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Event", b =>
                {
                    b.Navigation("EventImageUrls");
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Player", b =>
                {
                    b.Navigation("PlayerImageUrl")
                        .IsRequired();
                });

            modelBuilder.Entity("RacketSpeed.Infrastructure.Data.Entities.Post", b =>
                {
                    b.Navigation("PostImageUrls");
                });
#pragma warning restore 612, 618
        }
    }
}
